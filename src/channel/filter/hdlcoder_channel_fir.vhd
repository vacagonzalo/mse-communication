-- -------------------------------------------------------------
--
-- Module: hdlcoder_channel_fir
-- Generated by MATLAB(R) 8.1 and the Filter Design HDL Coder 2.9.3.
-- Generated on: 2020-10-01 02:35:34
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- Name: hdlcoder_channel_fir
-- TestBenchName: hdlcoder_channel_fir_tb

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Multipliers           : 1
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 2
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s16,15 -> [-1 1)
-- Input             : s10,8 -> [-2 2)
-- Filter Internals  : Specify Precision
--   Output          : s10,8 -> [-2 2)
--   Product         : s31,30 -> [-1 1)
--   Accumulator     : s31,30 -> [-1 1)
--   Round Mode      : convergent
--   Overflow Mode   : wrap
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY hdlcoder_channel_fir IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(9 DOWNTO 0); -- sfix10_En8
         filter_out                      :   OUT   std_logic_vector(9 DOWNTO 0)  -- sfix10_En8
         );

END hdlcoder_channel_fir;


----------------------------------------------------------------
--Module Architecture: hdlcoder_channel_fir
----------------------------------------------------------------
ARCHITECTURE rtl OF hdlcoder_channel_fir IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(9 DOWNTO 0); -- sfix10_En8
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(16384, 16); -- sfix16_En15
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En15

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 1); -- sfix10_En8
  SIGNAL product1_cast                    : signed(30 DOWNTO 0); -- sfix31_En30
  SIGNAL product1                         : signed(30 DOWNTO 0); -- sfix31_En30
  SIGNAL output_typeconvert               : signed(9 DOWNTO 0); -- sfix10_En8
  SIGNAL output_register                  : signed(9 DOWNTO 0); -- sfix10_En8


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 1) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1) <= delay_pipeline(0);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  product1_cast <= product1;

  product1 <= resize(delay_pipeline(0)(9 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 31);

  output_typeconvert <= resize(shift_right(product1_cast(30) & product1_cast(30 DOWNTO 0) + ( "0" & (product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22) & NOT product1_cast(22))), 22), 10);

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
